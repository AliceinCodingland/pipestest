'use strict';

/**
 * CDS Labs module
 * 
 *   Library to dataWorks APIs
 * 
 * @author David Taieb
 */
var request = require('request');
var global = require('../global');
var _ = require("lodash");
var util = require("util");

exports.Activity = require('./activity');
exports.ActivityRun = require('./activityrun');

function dataworks( options ){
	
	options = options || {};
	options.vcapPath = options.vcapPath || process.env.DEV_VCAP_PATH || null;
	
	var dwService = null;
	var url = null;
	var proxyTarget = null;
	var proxyRoot = null;
	
	//Init the instance
	(function(){
		var cfOptions = {};
		if ( options.vcapPath ){
			//User has specified the path of a properties file to load the vcap services from
			cfOptions.vcap = {"services" : require("jsonfile").readFileSync( options.vcapPath )};
		}
		
		//Parse the services
		var appEnv = require("cfenv").getAppEnv(cfOptions);
		dwService = appEnv.getService( options.dwServiceName || new RegExp(".*dataworks.*", "i") );	
		if ( !dwService ){
			throw new Error( "Unable to find dataWorks service");
		}
		
		console.log("Using dataworks service: " + dwService.name);
		
		url = require('url').parse( dwService.credentials.url );
		//proxyTarget = "http://127.0.0.1:8084"; 
		proxyTarget = url.protocol + "//" + url.host;
		proxyRoot = "/proxy";
		
		if ( process.env.START_PROXY ){
			var proxy = require("http-proxy").createProxyServer();
			global.app.use(proxyRoot, function(req, res ){				
				var newHeaders = {};
				_.forOwn( req.headers, function( value, key ){
					if ( ['authorization','accept','content-type'].indexOf( key.toLowerCase() ) >= 0 ){
						newHeaders[key] = value;
					}
				});
				req.headers = newHeaders;
				
				//Remove the /proxy from the url
				req.url = req.url.replace(proxyRoot, "");
				proxy.web( req, res, 
					{
						target: proxyTarget,
						secure: false
					}
				);
			});
			console.log("Proxy started on context root %s with target %s", proxyRoot, proxyTarget );
		}
	})();
	
	//Private APIs
	var serviceBindingUrl = "/dc/v1/activities";
	var makeUrl = function( path ){
		var baseUrl = process.env.USE_PROXY ? process.env.USE_PROXY + proxyRoot + url.pathname : dwService.credentials.url;
		return baseUrl + serviceBindingUrl + ( path || "" );
	};
	
	var getReqOptions = function(){
		return {
			'strictSSL':false,
			'auth': {
				'user': dwService.credentials.userid,
				'pass': dwService.credentials.password,
				'sendImmediately': true
			},
			json: true
		}
	}
	
	var getError = function( err, body ){
		if ( err ){
			return err;
		}
		
		if ( _.isPlainObject( body ) && body.hasOwnProperty("httpStatus") ){
			if ( body.httpStatus != 200 || body.httpStatus != 202 ){
				return body.msgExplanation || "Unexpected error";
			}
		}
		return null;
	}
	
	
	//Public APIs
	/**
	 * Factory method for creating a new connection
	 */
	this.newConnection = function( type ){
		if ( type === "cloudant" ){
			return new require("./cloudantConnection")();
		}else if ( type === "dashDB" ){
			return new require("./dashDBConnection")();
		}else{
			console.log("Unknow connection type: %s", type );
			return null;
		}
	}
	/**
	 * listActivities: return a list of activities for this instance
	 * @param callback( err, activities)
	 */
	this.listActivities = function(callback){
		console.log(makeUrl());
		request.get( makeUrl(), getReqOptions(), function(err, response, body){
			return callback( getError(err, body), body );
		});
	};
	
	/**
	 * getActivity: return an activity from an id
	 * @param activityId: id of the activity
	 * @callback(err, activity)
	 */
	this.getActivity = function( activityId, callback ){
		request.get( makeUrl( "/" + activityId), getReqOptions(), function(err, response, body){
			return callback( getError(err, body), body );
		});
	}
	
	/**
	 * deleteActivity
	 * @param activityId: id of the activity
	 * @callback(err)
	 */
	this.deleteActivity = function( activityId, callback ){
		request.del( makeUrl( "/" + activityId), getReqOptions(), function(err, response, body){
			return callback( err );
		});
	}
	
	/**
	 * createActivity: create a new activity represented by the activity object (see activity.js)
	 * @param activityDefinition: activity definition object
	 * @param callback( err, activity )
	 */
	this.createActivity = function( activityDefinition, callback ){
//		var payload = {
//			"activityPatternId" : "DataLoad",
//			"name": activity.name,
//			"shortDescription" : "Generated by Pipes",
//			createdUser: 'david_taieb@us.ibm.com',
//			isCancellable: false,
//			inputDocument:{
//				sourceOptions: { maxRecordPerTable: 'all' },
//				name: activity.name,
//				targetOptions: { 
//					existingTablesAction: 'append' 
//				},
//				target: {
//					connection: {
//						schema: 'DASH104484', name: 'DashTarget'
//					}
//				},
//				sources:[
//				    {
//				    	connection:{
//				    		schema: 'Cloudant', name: 'Target1'
//				    	},
//				    	tables:[ 
//			    	        { 
//			    	        	fileFormatOptions:{ 
//			    	        		nullValueHandling: 'empty',
//			    	        		decimalFormat: null,
//			    	        		timestampFormat: null,
//			    	        		encoding: null,
//			    	        		timeFormat: null,
//			    	        		dateFormat: null,
//			    	        		structureInFirstRow: false 
//			    	        	},
//			    	        	objectId: 'cloudant:fe93f44c-864f-4474-bfb0-6cb8330b2abc-bluemix:/pipe_db_459b421f85320a030c6bfd198dedabeb',
//			    	        	name: 'pipe_db_459b421f85320a030c6bfd198dedabeb' 
//			    	        }
//			    	    ]
//				    }
//				]
//			}
//		};
		
		var srcOptions = {	batchSize: 2000	};
		var sourceConnection = 	{
	            database : "targetDatabase",
	            createDatabase : false,
	            ssl : true,
	            user : "username",
	            password : "userPassword",
	            schema : "targetSchema",
	            host : "targetHost",
	            port: 123,
	            type : "cloudant"
	        };
		
		var trgOptions = {
			existingTablesAction : "append"		        	
    	};
		
		var targetConnection = 	{
	            database : "targetDatabase",
	            user : "targetUsername",
	            password : "targetPassword",
	            schema : "targetSchema",
	            host : "targetHost",
	            port: 123,
	            type : "dashdb"
	        };
		
		var targetTable = "SF_ACCOUNT";
		var srcTable = "SF_ACCOUNT";
		var srcTableDefinition = 	{
			id : "s1",
			name : srcTable
		};	
		
		var payload = {
			activityPatternId : "DataLoad",
			name : activityDefinition.name,
			shortDescription : activity.desc || "",
			inputDocument : {
				name : activityDefinition.name,
				sourceOptions : srcOptions,
				targetOptions : trgOptions,

				target : {
					connection : targetConnection,
					tables : [{
						name : targetTable,
						sourceIds : ["s1"]
					}]
				},
				sources : 	[{
					connection : sourceConnection,
					tables : [srcTableDefinition]
				}]
			}
		};
		
		request.post( makeUrl(), _.assign( getReqOptions(), {json: payload} ), function( err, response, body ){
			return callback( getError(err, body), body );
		});
	}
}

module.exports = dataworks;